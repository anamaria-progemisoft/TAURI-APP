name: "publish"
on:
  push:
    branches:
      - main
      - v0.74

jobs:
  publishtauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest]

    runs-on: ${{ matrix.platform }}

    outputs:
      releaseId: ${{ steps.tauri.outputs.releaseHtmlUrl }}
    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: Export variable (unix)
        if: matrix.platform != 'windows-latest'
        run: echo "TAURI_PRIVATE_KEY=${{ secrets.TAURI_PRIVATE_KEY }}" >> $GITHUB_ENV
      - name: Export variable (windows)
        if: matrix.platform == 'windows-latest'
        run: echo "TAURI_PRIVATE_KEY=${{ secrets.TAURI_PRIVATE_KEY }}" >> $GITHUB_ENV
        shell: bash
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
      - name: install frontend dependencies
        run: yarn install # change this to npm or pnpm depending on which one you use
      - uses: tauri-apps/tauri-action@v0
        id: tauri
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        with:
          tagName: v__VERSION__ # the action automatically replaces __VERSION__ with the app version
          releaseName: "v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: false
          prerelease: false
          includeUpdaterJson: true
          updaterJsonPreferNsis: true
          includeDebug: false
          includeRelease: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          

  create-release:
    runs-on: ubuntu-latest
    needs: publishtauri
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      version: 0.0.90
    steps:
      - uses: actions/create-release@v1  # Folosește acțiunea de creare a unui release
        with:
          tag_name: v${{ env.version }}  # Specifică numele tag-ului pentru release, adăugând 'v' în față
          release_name: Release ${{ env.version }}  # Numele release-ului
          body: Auto-generated release for version ${{ env.version }}  # Corpul release-ului
      - uses: actions/upload-artifact@v2  # Folosește acțiunea de încărcare a unui artefact (fișiere)
        with:
          # run: gh release upload v${{ env.version }} ./src-tauri/target/release/bundle/macos/tauri-app.app.tar.gz
          name: tauri-release  
          path: src-tauri/target/release/bundle/macos/tauri-app.app.tar.gz  # Calea către fișierele artefactului

      # - name: Upload Signature  
      # - uses: actions/upload-artifact@v2  # Folosește acțiunea de încărcare a unui artefact (semnătura)
      #   with:
      #     name: tauri-signature 
      #     path: ./path/to/signature.sig  # Calea către semnătură

      # - name: Update Version in Branch  
      #   run: |  # Rulează o serie de comenzi în stil script
      #     echo "${{ github.ref }}" >> version.txt  # Adaugă versiunea într-un fișier text
      #     echo "Download: https://github.com/${{ github.repository }}/releases/download/v${{ github.ref }}/your-app-name-${{ github.ref }}.tar.gz" >> version.txt  # Adaugă URL-ul pentru descărcare în fișierul text
      #     echo "Signature: https://github.com/${{ github.repository }}/releases/download/v${{ github.ref }}/your-app-name-${{ github.ref }}.tar.gz.sig" >> version.txt  # Adaugă URL-ul semnăturii în fișierul text
      #     git config --global user.email "action@github.com"  # Configurează adresa de email pentru commit
      #     git config --global user.name "GitHub Action"  # Configurează numele utilizatorului pentru commit
      #     git add version.txt  # Adaugă fișierul în starea de 'staged'
      #     git commit -m "Add version ${{ github.ref }} details"  # Realizează un commit          
      #     git push origin main 

      # - name: Print Release URL  
      #   run: echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/v${{ github.ref }}"  # Afișează URL-ul release-ului

