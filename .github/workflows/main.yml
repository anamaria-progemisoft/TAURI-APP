name: "publish"
on:
  push:
    branches:
      - main
      - v0.74

jobs:
  publishtauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: macOS-Apple
            target: universal-apple-darwin
            runner: macos-latest
          # - name: Windows
          #   target: x86_64-pc-windows-msvc
          #   runner: windows-latest  

    runs-on: ${{ matrix.runner }}

    outputs:
      releaseId: ${{ steps.tauri.outputs.releaseHtmlUrl }}
    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Add Rust Target
        run: rustup target add ${{ matrix.target }}
  
      - name: Export variable (unix)
        if: matrix.runner != 'windows-latest'
        run: echo "TAURI_PRIVATE_KEY=${{ secrets.TAURI_PRIVATE_KEY }}" >> $GITHUB_ENV
      - name: Export variable (windows)
        if: matrix.runner == 'windows-latest'
        run: echo "TAURI_PRIVATE_KEY=${{ secrets.TAURI_PRIVATE_KEY }}" >> $GITHUB_ENV
        shell: bash
      - name: install frontend dependencies
        run: yarn install # change this to npm or pnpm depending on which one you use
      - uses: tauri-apps/tauri-action@v0
        id: tauri
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        with:
          tagName: v__VERSION__ # the action automatically replaces __VERSION__ with the app version
          releaseName: "v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: false
          prerelease: false
          includeUpdaterJson: true
          updaterJsonPreferNsis: true
          includeDebug: false
          includeRelease: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # args: --target universal-apple-darwin
  update-json:
    runs-on: ubuntu-latest
    needs: publishtauri
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Configure Git
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
      - name: Create or checkout branch
        run: |
          git checkout "update" || git checkout --orphan "update"
      - name: Remove all files
        run: |
          git rm -rf .
      - name: Fetch JSON file
        env:
          RELEASE_ID: ${{needs.publishtauri.outputs.releaseId}}
        run: |
          echo "$RELEASE_ID"
          RELEASE_TAG=$(basename $RELEASE_ID)
          echo "$RELEASE_TAG"
          RELEASE_URL="https://github.com/anamaria-progemisoft/tauri-app/releases/download/$RELEASE_TAG/latest.json"
          echo "$RELEASE_URL"
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github.v3.raw" -o latest.json -L "$RELEASE_URL"
          cat latest.json
      - name: Commit and push changes
        run: |
          git add latest.json
          git commit -m "Update latest.json"
          git push -u origin update --force

  # create-release:
  #   runs-on: ubuntu-latest
  #   needs: publishtauri
  #   env:
  #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     version: 0.0.91
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/create-release@v1  # Folosește acțiunea de creare a unui release
  #       id: create_release
  #       with:
  #         tag_name: v${{ env.version }}  # Specifică numele tag-ului pentru release, adăugând 'v' în față
  #         release_name: Release ${{ env.version }}  # Numele release-ului
  #         body: Auto-generated release for version ${{ env.version }}  # Corpul release-ului
  #     - name: List github workspace
  #       run: ls -a /home/runner/work/tauri-app
  #     - name: List github workspace
  #       run: ls -a /home/runner/work/tauri-app/tauri-app
  #     - uses: actions/upload-release-asset@v1
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: ${{ github.workspace }}/src-tauri/target/release/bundle/macos/tauri-app.app.tar.gz
  #         asset_name: tauri-app.app.tar.gz
  #         asset_content_type: application/octet-stream
  #     - uses: actions/upload-release-asset@v1
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: ${{ github.workspace }}/src-tauri/target/release/bundle/macos/tauri-app.app.tar.gz.sig
  #         asset_name: tauri-app.app.tar.gz.sig
  #         asset_content_type: application/octet-stream

      