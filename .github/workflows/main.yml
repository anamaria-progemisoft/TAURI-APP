name: "publish"
on:
  push:
    branches:
      - main
      - v0.74

jobs:
  publishtauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest]

    runs-on: ${{ matrix.platform }}

    outputs:
      releaseId: ${{ steps.tauri.outputs.releaseHtmlUrl }}
    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: Export variable (unix)
        if: matrix.platform != 'windows-latest'
        run: echo "TAURI_PRIVATE_KEY=${{ secrets.TAURI_PRIVATE_KEY }}" >> $GITHUB_ENV
      - name: Export variable (windows)
        if: matrix.platform == 'windows-latest'
        run: echo "TAURI_PRIVATE_KEY=${{ secrets.TAURI_PRIVATE_KEY }}" >> $GITHUB_ENV
        shell: bash
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
      - name: install frontend dependencies
        run: yarn install # change this to npm or pnpm depending on which one you use
      - uses: tauri-apps/tauri-action@v0
        id: tauri
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        with:
          tagName: v__VERSION__ # the action automatically replaces __VERSION__ with the app version
          releaseName: "v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: false
          prerelease: false
          includeUpdaterJson: true
          updaterJsonPreferNsis: true
          includeDebug: false
          includeRelease: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-json:
    runs-on: ubuntu-latest
    needs: publishtauri
    steps:
      - name: Checkout code
        uses: actions/checkout@v2    # Acțiunea de checkout pentru a lua codul sursă al repo-ului
      - name: Configure Git
        run: |
          git config user.name "GitHub Action"      # Configurează numele utilizatorului pentru commit
          git config user.email "action@github.com" # Configurează adresa de email pentru commit
      - name: Create or checkout branch
        run: |
          git checkout "update" || git checkout --orphan "update"  # Dacă există  comută pe branchul "update", altfel creează-o
      - name: Remove all files
        run: |
          git rm -rf .  # Șterge toate fișierele din branch-ul "update"
      - name: Fetch JSON file
        env:
          RELEASE_ID: ${{needs.publishtauri.outputs.releaseId}}   # Preia ID-ul release-ului din job-ul anterior
        run: |
          echo "$RELEASE_ID"
          RELEASE_TAG=$(basename $RELEASE_ID)  # Obține tag-ul din ID-ul release-ului
          echo "$RELEASE_TAG"
          RELEASE_URL="https://github.com/anamaria-progemisoft/tauri-app/releases/download/v0.0.74/latest.json"  # Construiește URL-ul pentru fișierul JSON
          echo "$RELEASE_URL"
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github.v3.raw" -o latest.json -L "$RELEASE_URL" # Descarcă fișierul JSON folosind token-ul de autentificare
          cat latest.json  # Afișează conținutul fișierului JSON
      - name: Commit and push changes
        run: |
          git add latest.json
          git commit -m "Update latest.json"
          git push -u origin update --force
